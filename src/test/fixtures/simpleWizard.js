/*
 * This fixture object is generated by `curl https://api.forms.platforms.qld.gov.au/dev-svcwlpuksmwawwk/simpleWizard`
 */
export const formioRes = {
  _id: "625660e9905f7a7ba78e50e1",
  title: "SimpleWizard",
  name: "simpleWizard",
  path: "simplewizard",
  type: "form",
  display: "wizard",
  tags: [],
  access: [
    { type: "create_own", roles: [] },
    { type: "create_all", roles: [] },
    { type: "read_own", roles: [] },
    {
      type: "read_all",
      roles: [
        "6119e206c04b259858a8cd03",
        "6119e206c04b25bcb3a8cd04",
        "6119e206c04b251a1ea8cd05",
        "61d39ddf9e6f2577d40ef8e0",
      ],
    },
    { type: "update_own", roles: [] },
    { type: "update_all", roles: [] },
    { type: "delete_own", roles: [] },
    { type: "delete_all", roles: [] },
    { type: "team_read", roles: [] },
    { type: "team_write", roles: [] },
    { type: "team_admin", roles: [] },
  ],
  submissionAccess: [
    { type: "create_own", roles: [] },
    { type: "create_all", roles: [] },
    { type: "read_own", roles: [] },
    { type: "read_all", roles: [] },
    { type: "update_own", roles: [] },
    { type: "update_all", roles: [] },
    { type: "delete_own", roles: [] },
    { type: "delete_all", roles: [] },
    { type: "team_read", roles: [] },
    { type: "team_write", roles: [] },
    { type: "team_admin", roles: [] },
  ],
  owner: "5eaa61ce71e0224a598e4c55",
  components: [
    {
      title: "Page 1",
      label: "Page 1",
      type: "panel",
      key: "page1",
      components: [
        {
          label: "Text Field1",
          tableView: true,
          key: "textField",
          type: "textfield",
          input: true,
        },
      ],
      input: false,
      tableView: false,
    },
    {
      title: "Page 2",
      label: "Page 2",
      type: "panel",
      key: "page2",
      components: [
        {
          label: "Text Field2",
          tableView: true,
          key: "textField1",
          type: "textfield",
          input: true,
        },
      ],
      input: false,
      tableView: false,
    },
    {
      title: "Page 3",
      label: "Page 3",
      type: "panel",
      key: "page3",
      components: [
        {
          label: "Text Field3",
          tableView: true,
          key: "textField2",
          type: "textfield",
          input: true,
        },
      ],
      input: false,
      tableView: false,
    },
  ],
  settings: {},
  properties: {},
  project: "6119e206c04b252d12a8cd02",
  controller: "",
  revisions: "",
  _vid: 0,
  created: "2022-04-13T05:34:33.407Z",
  modified: "2022-04-13T05:39:46.358Z",
  machineName: "dev-svcwlpuksmwawwk:simpleWizard",
  config: { SubmissionEnvironment: "DEV" },
  module:
    '{\n  options: {\n    form: {\n      evalContext: {\n        defaultPlsPlusApiKey: "auto",\n        plsPlusApiHost: "https://www.address.services.qld.gov.au",\n        getPlsPlusApiKey: function (key) {\n          if (key === "auto") {\n            const host = location.host;\n            if (host.indexOf("forgov") !== -1) {\n              return "forgov";\n            } else if (host.indexOf("tmr") !== -1) {\n              return "tmr";\n            } else if (host.indexOf("covid19") !== -1) {\n              return "covid19";\n            } else if (host.indexOf("health") !== -1) {\n              return "health";\n            } else if (host.indexOf("resource") !== -1) {\n              return "resource";\n            } else if (location.href.indexOf("www.qld.gov.au/dev/") !== -1 || location.href.indexOf("oss-uat.clients.squiz.net/dev/") !== -1) {\n              // if it is used in demo page\n              return "qldonline";\n            } else if (host.indexOf("api.forms.platforms") !== -1 || host.indexOf("formio") !== -1) {\n              // if it is used in formio dev environment\n              return "formiotest";\n            }\n          }\n          // if (validKeys.indexOf(key) === -1) {\n          //   console.warn("Your PlsPlus API key is not valid, please enter a valid API key in formIO > form settings > custom properties > add value with `{ plsPlusApiKey: YOUR_FRANCHISE_API_KEY}`. For more instructions please visit https://servicesmadesimpler.govnet.qld.gov.au/wiki/display/PUB/Form.io+PlsPlus+address+component+setup+instructions");\n          //   return "invalid";\n          // }\n          if (key === "auto") {\n            console.warn("We can\'t find a valid PlsPlus API key based on the URL, please enter a valid API key in formIO > form settings > custom properties > add value with `{ plsPlusApiKey: YOUR_FRANCHISE_API_KEY}`. For more instructions please visit https://servicesmadesimpler.govnet.qld.gov.au/wiki/display/PUB/Form.io+PlsPlus+address+component+setup+instructions")\n          }\n          return key;\n        },\n        ie11Polyfill: function() {\n          (function (w) {\n            w.URLSearchParams = w.URLSearchParams || function (searchString) {\n                var self = this;\n                self.searchString = searchString;\n                self.get = function (name) {\n                    var results = new RegExp(\'[\\?&]\' + name + \'=([^&#]*)\').exec(self.searchString);\n                    if (results == null) {\n                        return null;\n                    }\n                    else {\n                        return decodeURIComponent(results[1]) || 0;\n                    }\n                };\n            }\n          })(window);\n        },\n        proxyXMLHttpRequest: function({form: form, defaultPlsPlusApiKey: defaultPlsPlusApiKey, getPlsPlusApiKey: getPlsPlusApiKey, plsPlusApiHost: plsPlusApiHost}) {\n          const nativeOpen = XMLHttpRequest.prototype.open;\n          const nativeSend = XMLHttpRequest.prototype.send;\n          let lastQuery = "";\n          \n          function proxiedOpen() {\n            if (form && form.properties) {\n              arguments[1] = arguments[1]\n              .replace(/%7b%7bform.properties.plsPlusApiKey%7d%7d/gi, form.properties.plsPlusApiKey)\n              .replace(/{{form.properties.plsPlusApiKey}}/gi, form.properties.plsPlusApiKey)\n              .replace(/%7b%7bplsPlusApiHost%7d%7d/gi, plsPlusApiHost)\n              .replace(/{{plsPlusApiHost}}/gi, plsPlusApiHost);\n            }\n            if (arguments[1].includes(\'pls-plus-qg/\')) { \n              this._url = arguments[1];\n              this.addEventListener(\'error\', function(e) { \n                console.warn("Your PlsPlus API key may not be valid, please enter a valid API key in formIO > form settings > custom properties > add value with `{ plsPlusApiKey: YOUR_FRANCHISE_API_KEY}`. For more instructions please visit https://servicesmadesimpler.govnet.qld.gov.au/wiki/display/PUB/Form.io+PlsPlus+address+component+setup+instructions");\n              })\n            };\n        \n            if (this._url && this._url.indexOf(\'/AutoCompleteAddress\') !== -1) {\n              const thisObj = this;\n        \n              this.addEventListener(\'readystatechange\', function(e) { \n                if (this.readyState == 4) {\n                  const data = JSON.parse(this.response);\n                  if (data.AutoCompleteAddressResponse && data.AutoCompleteAddressResponse.AutoCompleteAddressResult && data.AutoCompleteAddressResponse.AutoCompleteAddressResult.string ) {\n                    const newData = {suggest: data.AutoCompleteAddressResponse.AutoCompleteAddressResult.string.map(function (address) {return ({address: address})}) || []};\n                    Object.defineProperty(this, \'responseText\', { get: function() { return JSON.stringify(newData) } });\n                    Object.defineProperty(this, \'response\', { get: function() { return JSON.stringify(newData) } });\n                  }\n                }\n              })\n            }\n        \n            nativeOpen.apply(this, arguments);\n          }\n          \n          function proxiedSend() {\n            if (this._url) {\n              if (this._url.indexOf(\'/AutoCompleteAddress\') !== -1) {\n                const queryString = this._url.split(\'?\')[1];\n                const urlParams = new URLSearchParams(\'?\' + queryString);\n                const query = urlParams.get(\'query\') || "";\n                if (query.length <= 3) return;\n                if (lastQuery === query) return;\n                lastQuery = query;\n                this.responseType = "text";\n              }\n              if (this._url.indexOf(\'/ParseAddress\') !== -1) {\n                const queryString = this._url.split(\'?\')[1];\n                const urlParams = new URLSearchParams(\'?\' + queryString);\n                const query = urlParams.get(\'query\') || "";\n                if (!query) return;\n              }\n            }\n            \n            nativeSend.apply(this, arguments);\n          }\n        \n          XMLHttpRequest.prototype.open = proxiedOpen;\n          XMLHttpRequest.prototype.send = proxiedSend;\n          \n          /*\n          * logic of assigning plsPlusApiKey\n          * - if form.properties.plsPlusApiKey is provided, the key will be validated, if it\'s invalid the key will be changed to `invalid` and warning/instruction will be displayed.\n          * - if form.properties.plsPlusApiKey is not provided, key will be assigned based on URL, if no key is assigned because of non-qualified URL, key will be assigned to `auto` and warning/instruction will be displayed.\n          */\n          if (defaultPlsPlusApiKey && !form.properties.plsPlusApiKey) {\n            form.properties.plsPlusApiKey = defaultPlsPlusApiKey;\n          }\n          if (getPlsPlusApiKey && form.properties.plsPlusApiKey) {\n            form.properties.plsPlusApiKey = getPlsPlusApiKey(form.properties.plsPlusApiKey);\n          } \n        \n          Object.defineProperty(window, \'plsPlusInit\', { get: function() { return true } });\n        },\n        getPlsPlusAddress: function(addressDetailsData) {\n          let address;\n          if (addressDetailsData && \n            addressDetailsData.ParseAddressResponse && \n            addressDetailsData.ParseAddressResponse.ParseAddressResult && \n            addressDetailsData.ParseAddressResponse.ParseAddressResult.Results &&\n            addressDetailsData.ParseAddressResponse.ParseAddressResult.Results.Result\n            ) {\n            address = addressDetailsData.ParseAddressResponse.ParseAddressResult.Results.Result.Address;\n          }\n          return address;\n        },\n        getPlsPlusAddressLines: function(address) {\n          const siteName = address.SiteName || \'\';\n          const lot = (address.Parcel && address.Parcel.Lot) ? \'LOT \' + address.Parcel.Lot : undefined;\n          const complexDesc = [lot, address.Unit ? address.Unit.TypeCode : undefined, address.Unit ? address.Unit.Number : undefined, address.Level ? address.Level.TypeCode : undefined, address.Level ? address.Level.Number : undefined].filter( function (o) { return o !== undefined } ).join(\' \');\n          const roadNumberPart = [address.RoadNumber ? address.RoadNumber.First : undefined, (address.RoadNumber && address.RoadNumber.Last) ? \'-\' : undefined, address.RoadNumber ? address.RoadNumber.Last : undefined].filter( function (o) { return o !== undefined } ).join(\'\'); \n          const streetAddress = [roadNumberPart, address.Road ? address.Road.Name : undefined, address.Road ? address.Road.TypeCode : undefined].filter( function (o) { return o !== undefined } ).join(\' \');\n          return {\n            siteName: siteName,\n            lot: lot,\n            complexDesc: complexDesc,\n            roadNumberPart: roadNumberPart,\n            streetAddress: streetAddress\n          }\n        },\n        getComponentKey: function({parentComponent: parentComponent, fieldName: fieldName}) {\n          const comp = parentComponent.components.find(function (comp) { return comp.component ? comp.component.properties.fieldName === fieldName : comp.properties.fieldName === fieldName; });\n          if (!comp) return;\n          return comp.component ? comp.component.key : comp.key;\n        },\n        getComponentData: function({data: data, parentComponent: parentComponent, fieldName: fieldName}) {\n          const comp = parentComponent.components.find(function (comp) { return comp.component ? comp.component.properties.fieldName === fieldName : comp.properties.fieldName === fieldName; });\n          if (!comp) return;\n          const key = comp.component ? comp.component.key : comp.key;\n          return data[key];\n        },\n        getComponent: function({data: data, parentComponent: parentComponent, fieldName: fieldName}) {\n          const comp = parentComponent.components.find(function (comp) { return comp.component ? comp.component.properties.fieldName === fieldName : comp.properties.fieldName === fieldName; });\n          if (!comp) return;\n          return comp.component ? comp.component : comp;\n        }\n      }\n    }\n  }\n}',
};
